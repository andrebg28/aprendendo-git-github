Configurações iniciais:
    git config --global user.name "Andrebg28"
    git config --global user.email "andrebg28@gmail.com"
    git config --global core.editor code

Consultar configurações:
    git config user.name
    git config user.email
    git config core.editor
    git config --list

Configuração de alias(pseudônimo, apelido):
    git config --global alias."apelido_para_o_comando" "comando" #git config --global alias.s status (agora "git s" == "git status")

Inicializar o git em um projeto:
    git init


Adicionar arquivos para serem comitados no git:
    git add nome_do_arquivo

Comitar arquivos adicionados:
    git commit -m "mensagem que diz o que foi feito neste commit"

Adicionar e comitar arquivos anteriomente comitados:
    git commit -am "mensagem"


Ver historico de commits:
    git log
    git log --decorate
    git log --graph
    git log --author="parte_do_nome_do_author"

Listar commits por autor:
    git shortlog
    git shortlog -sn # Mostr o numero de commits por autor


Informa o que modificado em um determinado commit:
    git shou tag # git shou 27bb09559994840e2963d05720e1534d059a5f02
    
    
Listar as diferença entre o arquivo do ultimo commit e as novas modificações:
    git diff
    git diff --name-only



Desfazer mudanças em arquivos em estado "modified": 
#Aula 12
    git checkout nome_do_arquivo

Desfazer Commit: 
#Aula 12
    git reset --soft "hash" # git reset --soft
    git reset --mixed "hash"
    git reset --hard "hash"

Reverter Commit sem apaga-lo do historico:
    git revert "hash_do_comite_problematico" # git revert 27bb09559994840e2963d05720e1534d059a5f02

Criando branch:
    git checkout -b "nome_da_branch" # git checkout -b teste-branch (branch: ramo, ramificação)

Listando branch:
    git branch

Navegar entre branch:
    git checkout "nome_da_branch" # git checkout master

Apagar branch:
    git branch -D "nome da branch" # git branch -D teste-branch  # antes de apagar devemos mudar para outra branch existente.

Unindo branchs:
    git merge "nome_da_branch" # git merge teste
    git rebase "nome_da_branch" # git rebase teste


Guarda as modificações feitas mas tira o status "modified" dos arquivo modificados:
    git stash #Salva e remove o status "modified" dos arquivos
    git stash list #Lista todos os stash
    git stash clear #Limpa todos os stash

Criar tag:
    git tag -a "versão_da_tag" -m "mensagem descrevendo a versão" # git tag -a v1.0.0 -m "minha primeira tag"

Listar tags:
    git tag

Visualisar informações de determinada tag:
    git tag --show "versão_da_tag"

Apagar tag:
    git tag -d "versão_da_tag"

github{
    Link para pagina de ajuda para trabalhar com SSH:
        https://help.github.com/articles/connecting-to-github-with-ssh/

    Link para configurar chaves SSH no github:
        https://github.com/settings/keys

    'Empurra(push)' os commits para o github:
        git push origin "branch" # git push origin master
        git push -u origin "branch" # caso use "-u" os pushs seguintes poderam ser executados apenas assim: cdgui push

    'Empurra(push)' tags:
         git push origin "branch" --tags # git push origin master --tags


    Apagar tag remota(no github):
        git push origin :"versão_da_tag" # git push origin :1.0.1
    Clonando projeto apartir do github:
        git clone git@github.com:"repositorio" "nome da pasta" # git clone git@github.com:andrebg28/aprendendo-git-github.git clone-teste
}